/* eslint-disable */
import * as types from './graphql'
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  'query searchMedia($page: Int!, $sort: [MediaSort], $season: MediaSeason, $seasonYear: Int, $mediaType: MediaType, $isAdult: Boolean, $isOnList: Boolean, $countryOfOrigin: CountryCode, $search: String, $startDate: FuzzyDateInt, $startDateGreater: FuzzyDateInt, $startDateLesser: FuzzyDateInt, $endDate: FuzzyDateInt, $endDateGreater: FuzzyDateInt, $endDateLesser: FuzzyDateInt, $format: MediaFormat, $formatNot: MediaFormat, $formatIn: [MediaFormat], $formatNotIn: [MediaFormat], $status: MediaStatus, $statusNot: MediaStatus, $statusIn: [MediaStatus], $statusNotIn: [MediaStatus], $episodes: Int, $episodesGreater: Int, $episodesLesser: Int, $duration: Int, $durationGreater: Int, $durationLesser: Int, $chapters: Int, $chaptersGreater: Int, $chaptersLesser: Int, $volumes: Int, $volumesGreater: Int, $volumesLesser: Int, $genre: String, $genreIn: [String], $genreNotIn: [String], $tag: String, $tagIn: [String], $tagNotIn: [String], $minimumTagRank: Int, $tagCategory: String, $tagCategoryIn: [String], $tagCategoryNotIn: [String], $licensedBy: String, $licensedByIn: [String], $isLicensed: Boolean, $averageScore: Int, $averageScoreNot: Int, $averageScoreGreater: Int, $averageScoreLesser: Int, $popularity: Int, $popularityNot: Int, $popularityGreater: Int, $popularityLesser: Int, $source: MediaSource, $sourceIn: [MediaSource]) {\n  Page(page: $page, perPage: 50) {\n    pageInfo {\n      total\n      lastPage\n      hasNextPage\n    }\n    media(\n      sort: $sort\n      season: $season\n      seasonYear: $seasonYear\n      type: $mediaType\n      isAdult: $isAdult\n      onList: $isOnList\n      countryOfOrigin: $countryOfOrigin\n      search: $search\n      startDate: $startDate\n      startDate_greater: $startDateGreater\n      startDate_lesser: $startDateLesser\n      endDate: $endDate\n      endDate_greater: $endDateGreater\n      endDate_lesser: $endDateLesser\n      format: $format\n      format_not: $formatNot\n      format_in: $formatIn\n      format_not_in: $formatNotIn\n      status: $status\n      status_not: $statusNot\n      status_in: $statusIn\n      status_not_in: $statusNotIn\n      episodes: $episodes\n      episodes_greater: $episodesGreater\n      episodes_lesser: $episodesLesser\n      duration: $duration\n      duration_greater: $durationGreater\n      duration_lesser: $durationLesser\n      chapters: $chapters\n      chapters_greater: $chaptersGreater\n      chapters_lesser: $chaptersLesser\n      volumes: $volumes\n      volumes_greater: $volumesGreater\n      volumes_lesser: $volumesLesser\n      genre: $genre\n      genre_in: $genreIn\n      genre_not_in: $genreNotIn\n      tag: $tag\n      tag_in: $tagIn\n      tag_not_in: $tagNotIn\n      minimumTagRank: $minimumTagRank\n      tagCategory: $tagCategory\n      tagCategory_in: $tagCategoryIn\n      tagCategory_not_in: $tagCategoryNotIn\n      licensedBy: $licensedBy\n      licensedBy_in: $licensedByIn\n      isLicensed: $isLicensed\n      averageScore: $averageScore\n      averageScore_not: $averageScoreNot\n      averageScore_greater: $averageScoreGreater\n      averageScore_lesser: $averageScoreLesser\n      popularity: $popularity\n      popularity_not: $popularityNot\n      popularity_greater: $popularityGreater\n      popularity_lesser: $popularityLesser\n      source: $source\n      source_in: $sourceIn\n    ) {\n      id\n      siteUrl\n      title {\n        userPreferred\n        native\n        english\n      }\n      coverImage {\n        extraLarge\n        color\n      }\n    }\n  }\n}':
    types.SearchMediaDocument,
  'query getViewer {\n  Viewer {\n    name\n    siteUrl\n    avatar {\n      large\n    }\n  }\n}':
    types.GetViewerDocument,
}

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query searchMedia($page: Int!, $sort: [MediaSort], $season: MediaSeason, $seasonYear: Int, $mediaType: MediaType, $isAdult: Boolean, $isOnList: Boolean, $countryOfOrigin: CountryCode, $search: String, $startDate: FuzzyDateInt, $startDateGreater: FuzzyDateInt, $startDateLesser: FuzzyDateInt, $endDate: FuzzyDateInt, $endDateGreater: FuzzyDateInt, $endDateLesser: FuzzyDateInt, $format: MediaFormat, $formatNot: MediaFormat, $formatIn: [MediaFormat], $formatNotIn: [MediaFormat], $status: MediaStatus, $statusNot: MediaStatus, $statusIn: [MediaStatus], $statusNotIn: [MediaStatus], $episodes: Int, $episodesGreater: Int, $episodesLesser: Int, $duration: Int, $durationGreater: Int, $durationLesser: Int, $chapters: Int, $chaptersGreater: Int, $chaptersLesser: Int, $volumes: Int, $volumesGreater: Int, $volumesLesser: Int, $genre: String, $genreIn: [String], $genreNotIn: [String], $tag: String, $tagIn: [String], $tagNotIn: [String], $minimumTagRank: Int, $tagCategory: String, $tagCategoryIn: [String], $tagCategoryNotIn: [String], $licensedBy: String, $licensedByIn: [String], $isLicensed: Boolean, $averageScore: Int, $averageScoreNot: Int, $averageScoreGreater: Int, $averageScoreLesser: Int, $popularity: Int, $popularityNot: Int, $popularityGreater: Int, $popularityLesser: Int, $source: MediaSource, $sourceIn: [MediaSource]) {\n  Page(page: $page, perPage: 50) {\n    pageInfo {\n      total\n      lastPage\n      hasNextPage\n    }\n    media(\n      sort: $sort\n      season: $season\n      seasonYear: $seasonYear\n      type: $mediaType\n      isAdult: $isAdult\n      onList: $isOnList\n      countryOfOrigin: $countryOfOrigin\n      search: $search\n      startDate: $startDate\n      startDate_greater: $startDateGreater\n      startDate_lesser: $startDateLesser\n      endDate: $endDate\n      endDate_greater: $endDateGreater\n      endDate_lesser: $endDateLesser\n      format: $format\n      format_not: $formatNot\n      format_in: $formatIn\n      format_not_in: $formatNotIn\n      status: $status\n      status_not: $statusNot\n      status_in: $statusIn\n      status_not_in: $statusNotIn\n      episodes: $episodes\n      episodes_greater: $episodesGreater\n      episodes_lesser: $episodesLesser\n      duration: $duration\n      duration_greater: $durationGreater\n      duration_lesser: $durationLesser\n      chapters: $chapters\n      chapters_greater: $chaptersGreater\n      chapters_lesser: $chaptersLesser\n      volumes: $volumes\n      volumes_greater: $volumesGreater\n      volumes_lesser: $volumesLesser\n      genre: $genre\n      genre_in: $genreIn\n      genre_not_in: $genreNotIn\n      tag: $tag\n      tag_in: $tagIn\n      tag_not_in: $tagNotIn\n      minimumTagRank: $minimumTagRank\n      tagCategory: $tagCategory\n      tagCategory_in: $tagCategoryIn\n      tagCategory_not_in: $tagCategoryNotIn\n      licensedBy: $licensedBy\n      licensedBy_in: $licensedByIn\n      isLicensed: $isLicensed\n      averageScore: $averageScore\n      averageScore_not: $averageScoreNot\n      averageScore_greater: $averageScoreGreater\n      averageScore_lesser: $averageScoreLesser\n      popularity: $popularity\n      popularity_not: $popularityNot\n      popularity_greater: $popularityGreater\n      popularity_lesser: $popularityLesser\n      source: $source\n      source_in: $sourceIn\n    ) {\n      id\n      siteUrl\n      title {\n        userPreferred\n        native\n        english\n      }\n      coverImage {\n        extraLarge\n        color\n      }\n    }\n  }\n}'
): (typeof documents)['query searchMedia($page: Int!, $sort: [MediaSort], $season: MediaSeason, $seasonYear: Int, $mediaType: MediaType, $isAdult: Boolean, $isOnList: Boolean, $countryOfOrigin: CountryCode, $search: String, $startDate: FuzzyDateInt, $startDateGreater: FuzzyDateInt, $startDateLesser: FuzzyDateInt, $endDate: FuzzyDateInt, $endDateGreater: FuzzyDateInt, $endDateLesser: FuzzyDateInt, $format: MediaFormat, $formatNot: MediaFormat, $formatIn: [MediaFormat], $formatNotIn: [MediaFormat], $status: MediaStatus, $statusNot: MediaStatus, $statusIn: [MediaStatus], $statusNotIn: [MediaStatus], $episodes: Int, $episodesGreater: Int, $episodesLesser: Int, $duration: Int, $durationGreater: Int, $durationLesser: Int, $chapters: Int, $chaptersGreater: Int, $chaptersLesser: Int, $volumes: Int, $volumesGreater: Int, $volumesLesser: Int, $genre: String, $genreIn: [String], $genreNotIn: [String], $tag: String, $tagIn: [String], $tagNotIn: [String], $minimumTagRank: Int, $tagCategory: String, $tagCategoryIn: [String], $tagCategoryNotIn: [String], $licensedBy: String, $licensedByIn: [String], $isLicensed: Boolean, $averageScore: Int, $averageScoreNot: Int, $averageScoreGreater: Int, $averageScoreLesser: Int, $popularity: Int, $popularityNot: Int, $popularityGreater: Int, $popularityLesser: Int, $source: MediaSource, $sourceIn: [MediaSource]) {\n  Page(page: $page, perPage: 50) {\n    pageInfo {\n      total\n      lastPage\n      hasNextPage\n    }\n    media(\n      sort: $sort\n      season: $season\n      seasonYear: $seasonYear\n      type: $mediaType\n      isAdult: $isAdult\n      onList: $isOnList\n      countryOfOrigin: $countryOfOrigin\n      search: $search\n      startDate: $startDate\n      startDate_greater: $startDateGreater\n      startDate_lesser: $startDateLesser\n      endDate: $endDate\n      endDate_greater: $endDateGreater\n      endDate_lesser: $endDateLesser\n      format: $format\n      format_not: $formatNot\n      format_in: $formatIn\n      format_not_in: $formatNotIn\n      status: $status\n      status_not: $statusNot\n      status_in: $statusIn\n      status_not_in: $statusNotIn\n      episodes: $episodes\n      episodes_greater: $episodesGreater\n      episodes_lesser: $episodesLesser\n      duration: $duration\n      duration_greater: $durationGreater\n      duration_lesser: $durationLesser\n      chapters: $chapters\n      chapters_greater: $chaptersGreater\n      chapters_lesser: $chaptersLesser\n      volumes: $volumes\n      volumes_greater: $volumesGreater\n      volumes_lesser: $volumesLesser\n      genre: $genre\n      genre_in: $genreIn\n      genre_not_in: $genreNotIn\n      tag: $tag\n      tag_in: $tagIn\n      tag_not_in: $tagNotIn\n      minimumTagRank: $minimumTagRank\n      tagCategory: $tagCategory\n      tagCategory_in: $tagCategoryIn\n      tagCategory_not_in: $tagCategoryNotIn\n      licensedBy: $licensedBy\n      licensedBy_in: $licensedByIn\n      isLicensed: $isLicensed\n      averageScore: $averageScore\n      averageScore_not: $averageScoreNot\n      averageScore_greater: $averageScoreGreater\n      averageScore_lesser: $averageScoreLesser\n      popularity: $popularity\n      popularity_not: $popularityNot\n      popularity_greater: $popularityGreater\n      popularity_lesser: $popularityLesser\n      source: $source\n      source_in: $sourceIn\n    ) {\n      id\n      siteUrl\n      title {\n        userPreferred\n        native\n        english\n      }\n      coverImage {\n        extraLarge\n        color\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query getViewer {\n  Viewer {\n    name\n    siteUrl\n    avatar {\n      large\n    }\n  }\n}'
): (typeof documents)['query getViewer {\n  Viewer {\n    name\n    siteUrl\n    avatar {\n      large\n    }\n  }\n}']

export function graphql(source: string) {
  return (documents as any)[source] ?? {}
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<
  infer TType,
  any
>
  ? TType
  : never
